import 'dart:convert';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class CartScreen extends StatefulWidget {
  final String accessToken;

  const CartScreen({Key? key, required this.accessToken}) : super(key: key);

  @override
  _CartScreenState createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  List<dynamic> cartItems = [];
  Timer? _timer;
  int _countdown = 0;

  @override
  void initState() {
    super.initState();
    _fetchCartItems();
  }

  Future<void> _fetchCartItems() async {
    final url = 'http://197.136.16.164:8000/app/cart/';
    try {
      final response = await http.get(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer ${widget.accessToken}',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final List<dynamic> jsonResponse = jsonDecode(response.body);
        setState(() {
          cartItems = jsonResponse.map((item) {
            final assetDetails = _extractAssetDetails(item['asset']);
            return {
              'id': item['id'],
              'user': item['user'],
              'asset_name': assetDetails['name'],
              'serial_number': assetDetails['serial_number'],
              'kenet_tag': assetDetails['kenet_tag'],
              'location_received': assetDetails['location_received'],
              'new_location': assetDetails['new_location'],
              'status': assetDetails['status'],
              'AssetId': assetDetails['AssetId'],
              'added_at': DateTime.parse(item['added_at']),
            };
          }).toList();
          _calculateInitialCountdown();
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to fetch cart items')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching cart items: $e')),
      );
    }
  }

  void _calculateInitialCountdown() {
    if (cartItems.isNotEmpty) {
      final duration = 300;
      final now = DateTime.now();
      for (var item in cartItems) {
        final addedAt = item['added_at'] as DateTime;
        final elapsed = now.difference(addedAt).inSeconds;
        final remaining = duration - elapsed;

        if (remaining > 0) {
          _countdown = remaining;
          break;
        }
      }
      if (_countdown > 0) {
        _startCountdown();
      }
    }
  }

  void _startCountdown() {
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (_countdown > 0) {
          _countdown--;
        } else {
          _timer?.cancel();
          _removeAllAssetsFromCart();
        }
      });
    });
  }

  Future<void> _checkout() async {
    final checkoutUrl = 'http://197.136.16.164:8000/app/checkout/';

    // Prepare only the IDs of cart items for checkout
    final itemsForCheckout = cartItems.map((item) => item['id']).toList();

    // Debugging: Print the checkout payload
    print('Checkout Payload: ${jsonEncode({'cart_items': itemsForCheckout})}');

    try {
      final response = await http.post(
        Uri.parse(checkoutUrl),
        headers: {
          'Authorization': 'Bearer ${widget.accessToken}',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({'cart_items': itemsForCheckout}),
      );

      if (response.statusCode == 201) {
        setState(() {
          cartItems.clear();
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Checkout successful!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Checkout failed: ${response.statusCode}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error during checkout: $e')),
      );
    }
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Dispatch Basket')),
      body: cartItems.isNotEmpty
          ? Column(
        children: [
          Text('Time left: ${_countdown}s'),
          Expanded(
            child: ListView.builder(
              itemCount: cartItems.length,
              itemBuilder: (context, index) {
                final item = cartItems[index];
                return ListTile(
                  title: Text(item['asset_name']),
                  subtitle: Text('Serial: ${item['serial_number']}'),
                  trailing: IconButton(
                    icon: Icon(Icons.remove),
                    onPressed: () => _removeAllAssetsFromCart(),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              onPressed: _isCheckoutEnabled() ? _checkout : null,
              child: Text('Checkout'),
            ),
          ),
        ],
      )
          : Center(child: Text('No items in the dispatch basket.')),
    );
  }

  bool _isCheckoutEnabled() {
    // Check if all assets are 'pending_release'
    return cartItems.every((item) => item['status'] == 'pending_release');
  }

  Map<String, dynamic> _extractAssetDetails(String asset) {
    final regex = RegExp(
        r'^(.*?)\s*\((.*?)\)\s*\((.*?)\)\s*\((.*?)\)\s*\((.*?)\)\s*\((.*?)\)\s*\((.*?)\)\s*\((.*?)\)$');
    final match = regex.firstMatch(asset);

    if (match != null) {
      return {
        'name': match.group(1) ?? 'Unknown',
        'serial_number': match.group(2) ?? 'N/A',
        'kenet_tag': match.group(3) ?? 'N/A',
        'location_received': match.group(4) ?? 'N/A',
        'name_model': match.group(5) ?? 'N/A',
        'status': match.group(6) ?? 'N/A',
        'AssetId': int.tryParse(match.group(7) ?? '0') ?? 0,
        'new_location': match.group(8) ?? 'N/A',
      };
    }
    return {
      'name': 'Unknown',
      'serial_number': 'N/A',
      'kenet_tag': 'N/A',
      'location_received': 'N/A',
      'new_location': 'N/A',
      'status': 'N/A',
      'AssetId': 0,
      'name_model': 'N/A',
    };
  }

  void _removeAllAssetsFromCart() {
    for (var item in cartItems) {
      _editAsset(item['AssetId']);
      _removeAssetFromCart(item['id']);
    }
  }

  void _removeAssetFromCart(int assetId) async {
    final url = 'http://197.136.16.164:8000/app/cart/remove/$assetId/';
    try {
      final response = await http.delete(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer ${widget.accessToken}',
          'Content-Type': 'application/json',
        },
      );
      if (response.statusCode == 200) {
        setState(() {
          cartItems.removeWhere((item) => item['id'] == assetId);
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Item removed from dispatch basket successfully')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to remove item from dispatch basket')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error removing item from Dispatch basket: $e')),
      );
    }
  }

  void _editAsset(int assetId) async {
    final url = 'http://197.136.16.164:8000/app/assets/$assetId/';
    final updateData = jsonEncode({
      'status': 'instore',
      'new_location': null,
    });

    try {
      final response = await http.patch(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer ${widget.accessToken}',
          'Content-Type': 'application/json',
        },
        body: updateData,
      );

      if (response.statusCode == 200) {
        // Handle successful update
        print('Asset updated successfully: ID $assetId');
      } else {
        // Log detailed error message
        print('Failed to update asset: ${response.statusCode} - ${response.body}');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to update asset: ${response.body}')),
        );
      }
    } catch (e) {
      print('Error updating asset: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating asset: $e')),
      );
    }
  }
}
